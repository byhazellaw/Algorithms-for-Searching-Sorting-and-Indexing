
def swap(a, i, j):
    assert 0 <= i < len(a), f'accessing index {i} beyond end of array {len(a)}'
    assert 0 <= j < len(a), f'accessing index {j} beyond end of array {len(a)}'
    a[i], a[j] = a[j], a[i]

def simplePartition(a, pivot):
    ## To do: partition the array a according to pivot.
    # Your array must be partitioned into two regions - <= pivot followed by elements > pivot
    ## If an element at the beginning of the array is already <= pivot in the beginning of the array, it should not
    ## be moved by the algorithm.
    # your code here
    i = -1
    j = 0
    while j <= len(a)-1:
        if a[j]<=pivot:
            swap(a,i+1,j)
            i=i+1
            j=j+1
        else:
            j=j+1
    swap(a,i+1,len(a)-1)
    return i+1
        
def boundedSort(a, k):
    for j in range(1, k):
        simplePartition(a, j)
    
