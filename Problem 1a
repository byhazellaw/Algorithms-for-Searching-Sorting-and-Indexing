#First write a "helper" function with two extra parameters
# left, right that ddedscribes the search region as shown below

def findCrossoverIndexHelper(x, y, left, right):
    # Note: Output index i such that 
    #         left <= i <= right
    #         x[i] <= y[i]
    # First, Write down our invariants as assertions here
    
    assert(len(x) == len(y))
    assert(left >= 0)
    assert(left <= right-1)
    assert(right < len(x))
    
    # Here is the key property we would like to maintain.
    assert(x[left] > y[left])
    assert(x[right] < y[right])
    
    # your code here - homework part
    
    mid = (left + right)//2
    if x[mid]>=y[mid] and x[mid+1]<=y[mid+1]:
        return mid
    elif x[mid] < y[mid]:
        return findCrossoverIndexHelper(x, y, left, mid-1)
    else:
        return findCrossoverIndexHelper(x, y, mid+1, right)
    
#Define the function findCrossoverIndex that wil 
# call the helper function findCrossoverIndexHelper

def findCrossoverIndex(x, y):
    assert(len(x) == len(y))
    assert(x[0] > y[0])
    n = len(x)
    assert(x[n-1] < y[n-1]) # Note: this automatically ensures n >= 2 why?
    # your code here
    return findCrossoverIndexHelper(x,y,0,n-1)
    
  
    
    
